<!DOCTYPE html>
<html>
<head>
    <title>Chat</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
        integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
        integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13"
        crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        
    <link href="https://code.jquery.com/ui/1.13.0/themes/smoothness/jquery-ui.min.css" rel="stylesheet">
        
    <script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            margin: 0;
            padding-bottom: 3rem;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        #chatForm {
            background: rgba(0, 0, 0, 0.15);
            padding: 0.25rem;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            height: 3rem;
            box-sizing: border-box;
            backdrop-filter: blur(10px);
        }

        #input {
            border: none;
            padding: 0 1rem;
            flex-grow: 1;
            border-radius: 2rem;
            margin: 0.25rem;
        }

        #input:focus {
            outline: none;
        }


        #chatForm > button {
            background: #333;
            border: none;
            padding: 0 1rem;
            margin: 0.25rem;
            border-radius: 3px;
            outline: none;
            color: #fff;
        }

        #chatForm > button:disabled,
        #chatForm > button[disabled] {
            border: 3px solid #999999;
            background-color: #cccccc;
            color: #666666;
        }

        #messages {
            list-style-type: none;
            margin: 0;
            padding: 0;
        }

        #messages > li {
            padding: 0.5rem 1rem;
        }

        #messages > li:nth-child(odd) {
            background: #efefef;
        }


    </style>

    <style type="text/css">
        body {
            padding-left: 30px;
            padding-top: 40px;
            padding-bottom: 40px;
            background-color: white;
        }

        .login-box {
            max-width: 330px;
            margin: 0 auto;
        }

        .login-box .form-control {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">PennBook</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup"
                aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                <div class="navbar-nav">
                    <a class="nav-link" href="/friendVisualizationPage"> Friend Visualizer </a>
                    <a class="nav-link" href="/friendsList"> List of Friends </a>
                    <a class="nav-link" href="/wall"> My Wall</a>
                    <a class="nav-link" href="/chats"> Chat </a>
                    <a class="nav-link" href="/logout"> Logout </a>
                </div>
            </div>
        </div>
    </nav>
<h2>Chat Rooms</h2>

<div id="newGroupChatDialog" title="Start new group chat">
    <div id="newGroupChatUserSelector"></div>
    <button id="submitNewGroupChatBtn">Start</button>
</div>

<div id="inviteToChatDialog" title="Invite">
    <div id="inviteToChatUserSelector"></div>
    <button id="submitInviteToChatBtn">Invite</button>
</div>

<ul id="activeGroupChats"></ul>
<button id="startNewGroupChatBtn">Start new chat</button>
<button id="leaveChatBtn" disabled>Leave chat</button>
<button id="inviteToChatBtn" disabled>Invite users to chat</button>
<ul id="messages"></ul>
<form id="chatForm" action="">
    <input id="input" autocomplete="off"/>
    <button id="sendMessageBtn" disabled>Send</button>
</form>
<script src="/socketioclient"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
<script>
    $(function () {
        $("#newGroupChatDialog").dialog({
            autoOpen: false,
            draggable: false,
            modal: true,
            show: {
                effect: "blind",
                duration: 100
            },
            hide: {
                effect: "blind",
                duration: 100
            }
        });

        $("#inviteToChatDialog").dialog({
            autoOpen: false,
            draggable: false,
            modal: true,
            show: {
                effect: "blind",
                duration: 100
            },
            hide: {
                effect: "blind",
                duration: 100
            }
        });

        $("#submitNewGroupChatBtn").on("click", function () {
            var checkedUsers = [];
            $('input[name="groupChatSelectedUsers"]:checked').each(function () {
                checkedUsers.push(this.value);
            });

            // $.post("/start_group_chat", {
            //     initiator: "TODO",
            //     participantUsers: checkedUsers
            //
            // }, function (responseData) {
            //     alert(responseData)
            // });

            if (checkedUsers.length === 0) {
                alert('select at least 1 user to chat with');
                return;
            }
            socket.emit('start-group-chat', readCookie(CURRENT_USER_COOKIE_NAME), checkedUsers);
            $('#newGroupChatDialog').dialog('close');

        });

        $("#submitInviteToChatBtn").on("click", function () {
            var checkedUsers = [];
            $('input[name="inviteToChatSelectedUsers"]:checked').each(function () {
                checkedUsers.push(this.value);
            });

            // $.post("/start_group_chat", {
            //     initiator: "TODO",
            //     participantUsers: checkedUsers
            //
            // }, function (responseData) {
            //     alert(responseData)
            // });

            if (checkedUsers.length === 0) {
                alert('select at least 1 user to invite');
                return;
            }
            socket.emit('invite-to-group-chat', readCookie(CURRENT_USER_COOKIE_NAME), checkedUsers, currentRoomId);
            $('#inviteToChatDialog').dialog('close');

        });


        $("#startNewGroupChatBtn").on("click", function () {
            $('#newGroupChatUserSelector').empty();
            $("#newGroupChatDialog").dialog("open");


            for (i = 0; i < cachedUsersForChat.length; i++) {
                const value = cachedUsersForChat[i];
                $('#newGroupChatUserSelector')
                    .append(`<input type="checkbox" id="${value}" name="groupChatSelectedUsers" value="${value}">`)
                    .append(`<label for="${value}">${value}</label></div>`)
                    .append(`<br>`);
            }


        });

        $("#inviteToChatBtn").on("click", function () {
            $('#inviteToChatUserSelector').empty();
            $("#inviteToChatDialog").dialog("open");


            for (i = 0; i < cachedUsersForChat.length; i++) {
                const value = cachedUsersForChat[i];
                if (!currentRoomParticipants.includes(value)) { // add users to selector only they're not part of the conversation into users are invited
                    $('#inviteToChatUserSelector')
                        .append(`<input type="checkbox" id="${value}" name="inviteToChatSelectedUsers" value="${value}">`)
                        .append(`<label for="${value}">${value}</label></div>`)
                        .append(`<br>`);
                }
            }


        });

        $("#leaveChatBtn").on("click", function () {
            const currentUser = readCookie(CURRENT_USER_COOKIE_NAME)
            // alert(`current user ${currentUser} leaves room: ${currentRoomId}`)

            $.post("/leave_chat", {
                userName: currentUser,
                roomId: currentRoomId

            }, function (responseData) {
                //remove conversation from actve chats UI
                $(`li[roomid=${responseData}]`).remove();
                $("#input").prop('disabled', true);
                $("#sendMessageBtn").prop('disabled', true);
                $("#leaveChatBtn").prop('disabled', true);
                $("#inviteToChatBtn").prop('disabled', true);
                currentRoomId = '';
                currentRoomParticipants = [];
                messages.innerHTML = "";

            });
        });
    });
</script>
<script>


    CURRENT_USER_COOKIE_NAME = 'currentUser'

    function appendToHistory(userName, message, timestamp) {
        var item = document.createElement('li');
        const formattedTimestamp = new Date(parseInt(timestamp)).toLocaleTimeString('en-us', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        item.textContent = `${formattedTimestamp} [${userName}]: ${message}`;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
    }

    function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    var socket = io();
    socket.on('connect', () => {
        console.log(`connected on socket : ${socket.id}`); // an alphanumeric id...
    });
    socket.on('entered-group-chat', function (roomId, participants, displayAlert) {
        if (roomId === null && participants === null && displayAlert === null) {
            console.log('already in this group chat');
            return;
        }

        console.log(`entered group chat -- key: ${roomId} --- participants: ${participants}`)

        var item = document.createElement('li');
        let otherParticipants = [];
        const currentUser = readCookie(CURRENT_USER_COOKIE_NAME)
        for (i = 0; i < participants.length; i++) {
            if (participants[i] !== currentUser) {
                otherParticipants.push(participants[i]);
            }
        }

        if (otherParticipants.length === 0) {
            otherParticipants = ['ME']
        }
        item.textContent = `${otherParticipants}`;
        item.setAttribute('roomId', roomId);
        item.onclick = function (itemClicked) {
            activateGroupChat(itemClicked)
        }

        resetGroupChatSelectors()


        activeGroupChats.appendChild(item);

        if (displayAlert === true) {
            alert(`You have been invited to a chat with: ${otherParticipants}`)
        }
    });


    socket.on('invited-group-chat', function (roomId, allUsersInChat, initiator, displayAlert) {
        if (displayAlert) {
            alert(`${initiator} invited you to group chat with members: ${allUsersInChat}`);
        }

        let otherParticipants = [];
        const currentUser = readCookie(CURRENT_USER_COOKIE_NAME)
        for (i = 0; i < allUsersInChat.length; i++) {
            if (allUsersInChat[i] !== currentUser) {
                otherParticipants.push(allUsersInChat[i]);
            }
        }

        if (otherParticipants.length === 0) {
            otherParticipants = ['ME']
        }

        // update list of chats. If roomId is present --> update content. Else add new conversation
        let existingLi = $(`li[roomid=${roomId}]`);
        if (existingLi) {

            existingLi.text(otherParticipants);

        } else {
            var item = document.createElement('li');

            item.textContent = `${otherParticipants}`;
            item.setAttribute('roomId', roomId);
            item.onclick = function (itemClicked) {


                activateGroupChat(itemClicked)
            }


            activeGroupChats.appendChild(item);
            if (roomId === currentRoomId) {
                item.style.color = 'red';
            }
        }


    });


    socket.emit('register-user-to-socket', readCookie(CURRENT_USER_COOKIE_NAME));

    var messages = document.getElementById('messages');
    var activeGroupChats = document.getElementById('activeGroupChats')
    var form = document.getElementById('chatForm');
    var input = document.getElementById('input');
    var messageHistoryCache = {};

    var addToMessageHistoryCache = function (partnerUser, fromUser, msg, timestamp) {
        if (partnerUser in messageHistoryCache) {
            messageHistoryCache[partnerUser].push({'fromUser': fromUser, 'timestamp': timestamp, 'message': msg})
        } else {
            messageHistoryCache[partnerUser] = [{'fromUser': fromUser, 'timestamp': timestamp, 'message': msg}]

        }
    };

    var addToGroupChatHistoryCache = function (convKey, fromUser, msg, timestamp) {
        if (convKey in cachedGroupChats) {
            cachedGroupChats[convKey].push({'fromUser': fromUser, 'timestamp': timestamp, 'message': msg})
        } else {
            cachedGroupChats[convKey] = [{'fromUser': fromUser, 'timestamp': timestamp, 'message': msg}]

        }
    };

    form.addEventListener('submit', function (e) {
        e.preventDefault();
        if (input.value) {
            const currentUser = readCookie(CURRENT_USER_COOKIE_NAME)


            socket.emit('send-message-to-group-chat', input.value, currentUser, currentRoomId);


            const timestamp = new Date().getTime();
            appendToHistory('ME', input.value, timestamp);
            input.value = '';

        }
    });

    socket.on('receive-message', function (fromUser, msg, timestamp) {


        addToMessageHistoryCache(fromUser, fromUser, msg, timestamp);


        if (chatWithUser === fromUser) {
            appendToHistory(fromUser, msg, timestamp);
        } else {
            const currentUser = readCookie(CURRENT_USER_COOKIE_NAME);
            if (fromUser !== currentUser) {
                alert(`new message from ${fromUser}`)
            }


        }
    });
    socket.on('receive-message-from-group-chat', function (roomId, fromUser, participants, msg, timestamp) {


        if (currentRoomId === roomId) {
            appendToHistory(fromUser, msg, timestamp);
        } else {
            const currentUser = readCookie(CURRENT_USER_COOKIE_NAME);
            if (fromUser !== currentUser) {
                alert(`new message from group conversation: ${participants}`)
            }


        }
    });


    var currentRoomId = '';
    var currentRoomParticipants = [];


    var displayMessageHistoryCache = function () {
        const currentUser = readCookie(CURRENT_USER_COOKIE_NAME);
        for (var i = 0; i < messageHistoryCache[chatWithUser].length; i++) {
            let fromUser = messageHistoryCache[chatWithUser][i].fromUser;
            if (fromUser === currentUser) {
                fromUser = 'ME';
            }
            const msg = messageHistoryCache[chatWithUser][i].message;
            const timestamp = messageHistoryCache[chatWithUser][i].timestamp;
            appendToHistory(fromUser, msg, timestamp);
        }
    }

    var resetGroupChatSelectors = function () {
        const groupChatsListItems = $('#activeGroupChats').children();
        for (let i = 0; i < groupChatsListItems.length; i++) {
            groupChatsListItems[i].style.color = 'black';
        }
    }

    var activateChatWithUser = function (itemClicked) {

        $("#input").prop('disabled', false);
        $("#sendMessageBtn").prop('disabled', false);
        const liClicked = itemClicked.currentTarget;
        const newUserToChat = liClicked.innerText;

        if (newUserToChat === chatWithUser) {
            return;
        }

        console.log(`start chat with: ${newUserToChat}`);
        chatWithUser = newUserToChat;

        const currentUser = readCookie(CURRENT_USER_COOKIE_NAME);
        // update user selector
        resetGroupChatSelectors()


        liClicked.style.color = 'red';

        // clear chat history
        messages.innerHTML = "";


        // try to load chat history from client cache
        if (chatWithUser in messageHistoryCache) {
            displayMessageHistoryCache()
        } else {
            $.getJSON(`/get_chat_history_by_user?userName=${chatWithUser}`, function (data) {
                messageHistoryCache[chatWithUser] = data
                console.log(data)
                displayMessageHistoryCache()
            });
        }


    };

    var activateGroupChat = function (itemClicked) {

        $("#input").prop('disabled', false);
        $("#sendMessageBtn").prop('disabled', false);
        $("#leaveChatBtn").prop('disabled', false);
        $("#inviteToChatBtn").prop('disabled', false);
        const liClicked = itemClicked.currentTarget;
        console.log(`activate group chat: ${liClicked.textContent}`)
        const newRoomId = liClicked.getAttribute('roomId');

        if (newRoomId === currentRoomId) {
            return;
        }

        const roomId = liClicked.getAttribute('roomId');
        const participants = liClicked.innerText.split(',');

        currentRoomId = roomId;
        currentRoomParticipants = participants;
        console.log(`activate group chat with: ${currentRoomId}`);


        const currentUser = readCookie(CURRENT_USER_COOKIE_NAME);
        // update user selector
        const allListItems = $('#usersForChat').children();
        for (let i = 0; i < allListItems.length; i++) {
            allListItems[i].style.color = 'black';
        }

        resetGroupChatSelectors()
        liClicked.style.color = 'red';

        // clear chat history
        messages.innerHTML = "";


        // try to load chat history from client cache


        $.getJSON(`/get_history_by_group_chat_id?roomId=${roomId}`, function (data) {

            for (var i = 0; i < data.length; i++) {
                const userName = data[i]['sender'];
                const message = data[i]['content'];
                const timestamp = data[i]['timestamp'];

                appendToHistory(userName, message, timestamp);

            }
        });


    };

    var cachedUsersForChat = [];
    var cachedGroupChats = {};

    $(document).ready(function () {
        $("#input").prop('disabled', true);
        cachedUsersForChat = [];
        $.getJSON('/get_users_for_chat', function (data) {
            for (i = 0; i < data.length; i++) {
                cachedUsersForChat.push(data[i]);
            }

        });

        $.getJSON('/get_active_group_chats', function (data) {
            for (const [roomId, participants] of Object.entries(data)) {


                var item = document.createElement('li');
                item.textContent = participants;
                item.setAttribute('roomId', roomId);
                activeGroupChats.appendChild(item);

                let otherParticipants = [];
                const currentUser = readCookie(CURRENT_USER_COOKIE_NAME)
                for (i = 0; i < participants.length; i++) {
                    if (participants[i] !== currentUser) {
                        otherParticipants.push(participants[i]);
                    }
                }

                if (otherParticipants.length === 0) {
                    otherParticipants = ['ME']
                }
                item.textContent = `${otherParticipants}`;
                item.setAttribute('roomId', roomId);
                item.onclick = function (itemClicked) {


                    activateGroupChat(itemClicked)
                }
                resetGroupChatSelectors()
            }
        });
    })
</script>
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.js"></script>
</body>
</html>